local colors = require("theme").get_theme_tb("main_colors")
local utils = require("theme.colors")

return {
	StatusLine = { bg = colors.statusline_bg },
	StalineVenvIcon = { bg = colors.green, fg = colors.black },
	StalineVenvName = { bg = colors.black, fg = colors.green },
	StalineFolderIcon = { bg = colors.red, fg = colors.black },
	StalineFolderSep = { bg = colors.black, fg = colors.red },
	StalineFolderText = { bg = utils.blend(colors.red, colors.black, 0.05), fg = colors.red },
	StalineFolderTextMinimal = { bg = colors.black, fg = colors.grey_fg },

	StalineFilename = { bg = colors.black, fg = colors.grey_fg },
	StalineFilenameMinimal = { bg = colors.black, fg = colors.grey_fg },
	StalineFilenameFancy = { bg = colors.lightbg, fg = colors.grey_fg },
	StalineFilenameSep = { fg = colors.black, bg = colors.black },
	StalineLogo = { bg = colors.black, fg = colors.blue },
	StalineProgress = { bg = utils.blend(colors.green, colors.black, 0.05), fg = colors.green },
	StalineProgressMinimal = {
		bg = utils.blend(colors.lightbg, colors.white, 0.93),
		fg = utils.blend(colors.blue, colors.lightbg, 0.5),
	},
	StalineModeMinimal = {
		bg = utils.blend(colors.lightbg, colors.white, 0.93),
		fg = utils.blend(colors.blue, colors.lightbg, 0.5),
	},
	StalineProgressSep = { bg = colors.grey, fg = colors.green },
	StalineProgressIcon = { bg = colors.green, fg = colors.grey },
	StalineBranch = { bg = colors.black, fg = colors.light_grey },
	StalineModeSepTwo = { bg = colors.lightbg, fg = colors.grey },
	StalineNormalMode = { bg = colors.blue, fg = colors.black },
	StalineVisualMode = { bg = colors.yellow, fg = colors.black },
	StalineCommandMode = { bg = colors.orange, fg = colors.black },
	StalineInsertMode = { bg = colors.green, fg = colors.black },
	StalineTerminalMode = { bg = colors.purple, fg = colors.black },
	StalineNTerminalMode = { bg = colors.purple, fg = colors.black },
	StalineConfirmMode = { bg = colors.teal, fg = colors.black },
	StalineNormalModeSep = { fg = colors.blue, bg = colors.grey },
	StalineVisualModeSep = { fg = colors.yellow, bg = colors.grey },
	StalineCommandModeSep = { fg = colors.orange, bg = colors.grey },
	StalineInsertModeSep = { fg = colors.green, bg = colors.grey },
	StalineTerminalModeSep = { fg = colors.purple, bg = colors.grey },
	StalineNTerminalModeSep = { fg = colors.grey_fg, bg = colors.grey },
	StalineConfirmModeSep = { fg = colors.teal, bg = colors.grey },
	StalineEmptySpace = { bg = colors.black, fg = colors.grey_fg },
	StalineSep = { bg = colors.black, fg = colors.lightbg },
	StalineNix = { bg = colors.black, fg = colors.blue },
	StalineLspError = { bg = colors.black, fg = colors.red },
	StalineLspInfo = { bg = colors.black, fg = colors.blue },
	StalineLspHints = { bg = colors.black, fg = colors.teal },
	StalineLspWarning = { bg = colors.black, fg = colors.yellow },
	StalineLspErrorIcon = { bg = colors.black, fg = colors.red },
	StalineLspInfoIcon = { bg = colors.black, fg = colors.blue },
	StalineLspHintsIcon = { bg = colors.black, fg = colors.teal },
	StalineLspWarningIcon = { bg = colors.black, fg = colors.yellow },
	StalineLspNameNormal = { bg = utils.blend(colors.purple, colors.black, 0.07), fg = colors.purple },
	StalineLspName = { bg = utils.blend(colors.purple, colors.black, 0.07), fg = colors.purple },
	StalineLspNameMinimal = { bg = colors.black, fg = colors.light_grey },
	StalineLspIcon = { bg = colors.purple, fg = colors.black },
	StalineDiffAdd = { bg = colors.black, fg = colors.green },
	StalineDiffAddFancy = { bg = colors.black, fg = colors.green },
	StalineDiffAddMinimal = { bg = colors.black, fg = colors.light_grey },
	StalineDiffChange = { bg = colors.black, fg = colors.sun },
	StalineDiffChangeFancy = { bg = colors.black, fg = colors.yellow },
	StalineDiffChangeMinimal = { bg = colors.black, fg = colors.light_grey },
	StalineDiffRemoveFancy = { bg = colors.black, fg = colors.red },
	StalineDiffRemoveMinimal = { bg = colors.black, fg = colors.light_grey },
	StalineDiffRemove = { bg = colors.black, fg = colors.red },
	StalineDefaultFile = { bg = colors.black, fg = colors.white },
}
